/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        qw_esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            timeout-ms = <100>;
            require-prior-idle-ms = <20>;
            slow-release;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_Layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R         &kp T          &kp Y        &kp U          &kp I          &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D         &kp F         &kp G          &kp H        &kp J          &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V         &kp B          &kp N        &kp M          &kp COMMA      &kp DOT  &kp FSLH  &kp ESC
                         &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 SPACE    &lt 2 ENTER  &kp RIGHT_GUI  &kp RIGHT_ALT
            >;
        };

        Lower_Layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LS(N1)     &kp LS(N2)  &kp LS(N3)  &kp LS(N4)      &kp LS(N5)            &kp LS(N6)           &kp LS(N7)       &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &kp BSPC
&trans  &kp N1         &kp N2      &kp N3      &kp N4          &kp N5                &kp N6               &kp N7           &kp N8      &kp N9      &kp N0      &trans
&trans  &kp BACKSLASH  &kp GRAVE   &trans      &kp LEFT_BRACE  &kp LS(LEFT_BRACE)    &kp RS(RIGHT_BRACE)  &kp RIGHT_BRACE  &trans      &trans      &trans      &trans
                                   &trans      &trans          &trans                &trans               &trans           &trans
            >;
        };

        Raise_Layer {
            bindings = <
&trans  &kp DEL   &trans   &kp LS(MINUS)  &kp MINUS  &kp PAGE_UP      &kp RG(LEFT_ARROW)  &trans          &trans        &trans             &trans           &trans
&trans  &kp HOME  &kp END  &kp LS(EQUAL)  &kp EQUAL  &kp PAGE_DOWN    &kp LEFT            &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT          &trans           &trans
&trans  &trans    &trans   &trans         &trans     &trans           &kp C_PLAY_PAUSE    &kp C_PREVIOUS  &kp C_NEXT    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE
                           &trans         &trans     &trans           &trans              &trans          &trans
            >;
        };

        Config_Layer {
            bindings = <
&out OUT_BLE  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&out OUT_USB  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
